// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  documents Document[]
  queries   Query[]
  
  @@map("users")
}

model Document {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  content     String
  filePath    String
  fileType    String
  fileSize    Int
  embedding   Float[]
  metadata    Json?
  summary     String?
  entities    String[]
  topics      String[]
  sentiment   Float?
  language    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]
  
  @@map("documents")
}

model Image {
  id          String   @id @default(cuid()) @map("_id")
  documentId  String
  imagePath   String
  description String?
  ocrText     String?
  embedding   Float[]
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("images")
}

model Query {
  id          String   @id @default(cuid()) @map("_id")
  query       String
  queryType   QueryType @default(TEXT)
  response    String
  sources     String[]
  confidence  Float?
  processingTime Int?
  modelUsed   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentIds String[]
  
  @@map("queries")
}

model EmbeddingModel {
  id          String   @id @default(cuid()) @map("_id")
  name        String   @unique
  version     String
  dimensions  Int
  modelType   ModelType
  isActive    Boolean  @default(false)
  performance Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("embedding_models")
}

model SystemMetrics {
  id              String   @id @default(cuid()) @map("_id")
  metricType      String
  value           Float
  metadata        Json?
  timestamp       DateTime @default(now())
  
  @@map("system_metrics")
}

model ApiUsage {
  id          String   @id @default(cuid()) @map("_id")
  apiProvider String
  endpoint    String
  requestCount Int
  responseTime Float?
  errorCount  Int      @default(0)
  cost        Float?
  date        DateTime @default(now())
  
  @@map("api_usage")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum QueryType {
  TEXT
  IMAGE
  MULTIMODAL
  VOICE
}

enum ModelType {
  TEXT_EMBEDDING
  IMAGE_EMBEDDING
  MULTIMODAL_EMBEDDING
}
